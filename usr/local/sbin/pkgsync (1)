#! /bin/bash
#
# pkgsync - Automated package synchronization tool
# 2004-2007 Steinar H. Gunderson <sgunderson@bigfoot.com>.
# Modificado: 11/12/2013 Esteban M. Navas Martín <algodelinux@gmail.com>
# Modificado: 19/11/2015 Esteban M. Navas Martín <algodelinux@gmail.com>
#
# Permite fusionar los archivos musthave, maynothave y mayhave gestionados
# por la sección de administracóon de sistemas con los archivos
# musthave.ies, maynothave.ies y mayhave.ies gestionados por el administrador
# informático del centro, fusioándolos en los siguientes archivos:
# musthave.all, maynothave.all y mayhave.all
#
# En esta última versión he añadido la posibilidad de crear fiche
# en /etc/pkgsync/musthave.d, /etc/pkgsync/mayhave.d y /etc/pkgsync/maynothave.d
# lo que permite al administrador organizar las listas de ficheros
# Con ésto facilitamos una gestión compartida
#
# Además permite comprobar si alguno de los ficheros de pkgsync contiene paquetes
# que no se encuentran disponibles en los repositorios
#
# Licensed under the GNU GPL version 2, as publicshed by the FSF;
# see /usr/share/common-licenses/GPL-2 on Debian systems or visit
# www.fsf.org.
#

. /etc/default/pkgsync

set -e
set -o noglob
export DEBIAN_FRONTEND=noninteractive
export VERSION=1.21

if [ ! -r /etc/pkgsync/musthave -o \
     ! -r /etc/pkgsync/mayhave -o \
     ! -r /etc/pkgsync/maynothave ]; then
	echo Error: Missing files in /etc/pkgsync. Aborting.
	echo
	echo Please see /usr/share/doc/pkgsync/README.Debian for information on 
	echo configuring pkgsync.

	exit 1
fi

print_help () {
	echo "pkgsync $VERSION"
	echo "Automated package synchronization tool"
	echo ""
	echo "Usage: pkgsync [OPTIONS]"
	echo "Recognized options:"
	echo "  -h, --help           display this help and exit"
	echo "  -k, --keep-unused    don't remove unused packages"
	echo "  -s, --simulate       don't do anything, just print out what would have happened"
	echo "  -d, --dpkg-glob      use dpkg's globbing (deprecated)"
	echo "  -a, --aptitude-glob  use aptitude's globbing (default, recommended)"
        echo "  -t, --test-files     test pkgsync files"
	echo ""
	echo "Complete documentation can be found in /usr/share/doc/pkgsync/README.Debian."
}

test_files () {
  :>/var/log/pkgsync/removefromlist.log

  for fichero in $(find /etc/pkgsync -type f); do
    echo "Checking $fichero"
    while read paquete; do
       existe=$(apt-cache policy $paquete 2>/dev/null)
       if [ ! "$existe" ]; then 
          echo "Package $paquete in file $fichero isn't in repositories"
          echo "Package $paquete in file $fichero isn't in repositories" >> /var/log/pkgsync/removefromlist.log
       fi
    done < $fichero
  done
  echo "See /var/log/pkgsync/removefromlist.log"
}

# Largely adapted from /usr/lib/getopt/parse.bash
parse_options () {
	TEMP=`getopt -o htksad --long help,test-files,keep-unused,simulate,dpkg-glob,aptitude-glob -n 'pkgsync' -- "$@"`
	eval set -- "$TEMP"

	APTITUDE_ARGS="-y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold"
	GLOB_STYLE="aptitude"

	while :; do
		case "$1" in
			-s|--simulate)
				APTITUDE_ARGS="$APTITUDE_ARGS -s"
				shift
				;;
			-k|--keep-unused)
				APTITUDE_ARGS="$APTITUDE_ARGS -o Aptitude::Delete-Unused=false"
				shift
				;;
			-d|--dpkg-glob)
				GLOB_STYLE="dpkg"
				shift
				;;
			-a|--aptitude-glob)
				GLOB_STYLE="aptitude"
				shift
				;;
                        -t|--test-files)
                                test_files
                                exit 0
                                ;;
			-h|--help)
				print_help
				exit 0
				;;
			--)
				shift
				break
				;;
			*)
				echo "Internal error: doesn't recognize argument '$1'"
				exit 1
				;;
		esac
	done
}
readpkgs () {
	grep -vE '^#' "$1" | grep -vE '^\s*$' || true
}
getpkgs () {
	IFS="
"
	for pkg in $( readpkgs $1 ); do
		# if the line starts with "debtags:", it's a debtags expression,
		# so run it through debtags.
		if echo "$pkg" | grep -Eq '^debtags:'; then
			if ! [ "$USE_DEBTAGS" ]; then
				echo Error: "debtags:" line encountered, but debtags is not installed. Stopping.
				exit 1
			fi
			PATTERN=$( echo "$pkg" | cut -d: -f2- )
			debtags grep "$PATTERN" | tagcoll copy | cut -d: -f1
		else
			# if the line is "meta:current-kernel", use the kernel package
			# for the currently running kernel, if it exists
			if [ "$pkg" = "meta:current-kernel" ]; then
				KVERS=$( uname -r )
				if [ "$GLOB_STYLE" = "dpkg" ]; then
					dpkg-query --showformat '${Package}\n' -W "*-image-$KVERS" 2>/dev/null || true
				else
					aptitude -F '%p' search ".*-image-$KVERS$" | sed "s/ \+$//" 2>/dev/null || true
				fi
			else
				# if there's a wildcard in this, push it through dpkg/aptitude
				# to glob. if not, just print it out.
				if [ "$GLOB_STYLE" = "dpkg" ]; then
					if echo "$pkg" | grep -Eq '[][*?]'; then
						dpkg-query --showformat '${Package}\n' -W "$pkg" 2>/dev/null || true
					else
						echo "$pkg"
					fi
				else
					if echo "$pkg" | grep -Eq '[][*?()|~]'; then
						aptitude -F '%p' search "$pkg" | sed "s/ \+$//" 2>/dev/null || true
					else
						echo "$pkg"
					fi
				fi
			fi
		fi
	done
}
run_aptitude () {
	echo RUNNING: aptitude $APTITUDE_ARGS "$@"
	aptitude $APTITUDE_ARGS "$@" 
}
run_debtags () {
	if [ "$USE_DEBTAGS" ]; then
		echo RUNNING: debtags "$@"
		debtags "$@" 
	fi
}

# The beautiful look of hacks in the morning...
filter () { 
	echo "$@" | tr " " "\n" | sort | uniq -c | grep "     2" | cut -c9-
}

parse_options "$@"

# Check if we've got debtags installed
[ -x /usr/bin/debtags ] && USE_DEBTAGS=yes

# Update the package lists
aptitude update
run_debtags update

# Create ies files if don't exists
test -f /etc/pkgsync/musthave.ies || touch /etc/pkgsync/musthave.ies
test -f /etc/pkgsync/maynothave.ies || touch /etc/pkgsync/maynothave.ies
test -f /etc/pkgsync/mayhave.ies || touch /etc/pkgsync/mayhave.ies

if [ "$IGNORE_MUSTHAVE" = "yes" ]; then
   $MUSTHAVE=""
else
   $MUSTHAVE="/etc/pkgsync/musthave"
fi

if [ "$IGNORE_MAYNOTHAVE" = "yes" ]; then
   $MAYNOTHAVE=""
else
   $MAYNOTHAVE="/etc/pkgsync/maynothave"
fi

if [ "$IGNORE_MAYHAVE" = "yes" ]; then
   $MAYHAVE=""
else
   $MAYHAVE="/etc/pkgsync/mayhave"
fi


# Merge files
sort -o /etc/pkgsync/musthave.all $MUSTHAVE /etc/pkgsync/musthave.ies $(find /etc/pkgsync/musthave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null)
sort -o /etc/pkgsync/maynothave.all $MAYNOTHAVE /etc/pkgsync/maynothave.ies $(find /etc/pkgsync/maynothave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null)
sort -o /etc/pkgsync/mayhave.all $MAYHAVE /etc/pkgsync/mayhave.ies $(find /etc/pkgsync/mayhave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null)

# Remove empty lines
sed -i '/^$/d' /etc/pkgsync/musthave.all
sed -i '/^$/d' /etc/pkgsync/mayhave.all
sed -i '/^$/d' /etc/pkgsync/maynothave.all

# Remove maynothave.all packages from musthave.all
comm -23 /etc/pkgsync/musthave.all /etc/pkgsync/maynothave.all > /tmp/musthave.all
mv /tmp/musthave.all /etc/pkgsync/musthave.all

# Find out what parameters to give to aptitude.
installed=$( dpkg -l | grep '^ii' | cut -c5- | cut '-d ' -f1 )
musthave_install=$( getpkgs /etc/pkgsync/musthave.all | sort -u | sed "s/$/+/" )
maynothave_remove=$( getpkgs /etc/pkgsync/maynothave.all | sort -u | sed "s/$/-/" )
mayhave_marknonauto=$( getpkgs /etc/pkgsync/mayhave.all | sort -u | sed "s/$/\&m/" )
mustormayhave=$( ( getpkgs /etc/pkgsync/musthave.all ; getpkgs /etc/pkgsync/mayhave.all ) | sort -u )
rest_markauto=$( filter $installed $installed $mustormayhave | sed "s/$/\&M/" )

run_aptitude full-upgrade '?upgradable' $musthave_install $maynothave_remove $mayhave_marknonauto $rest_markauto
run_aptitude autoclean

