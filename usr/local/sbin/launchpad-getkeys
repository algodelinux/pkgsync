#! /bin/bash
# Modified version by Esteban M. Navas <algodelinux@gmail.com>

RED='\033[0;31m'
GREEN='\033[0;32m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

if [ "`whoami`" != "root" ]; then
   echo -e "${RED}Please run with SUDO or root user account${NC}"
   exit 1
fi

function HELP ()
{
echo -e "${WHITE}\n\nlaunchpad-getkeys${NC} is an utility to automatically import all Lunchpad PPAs missing GPG keys.

Usage:
* use without any parameter to automatically import all the missing GPG keys.
* ${WHITE}-k SERVER:PORT${NC} will pass a new keyserver, in case the default keyserver is down.
* ${WHITE}-p PROXY:PORT${NC} lets you specify a proxy-server other than the default one.\n${NC}"
exit 0
}

[ -s /etc/default/launchpad-getkeys ] && . /etc/default/launchpad-getkeys

if [[ $SERVER ]] && [[ $PORT ]]; then
   PROXY=http://$SERVER:$PORT
fi

while getopts "k:p:h\?" opt; do
	case "$opt" in
		k ) KEYSERVER="$OPTARG"			;;
		p ) PROXY="$OPTARG"			;;
		h ) HELP				;;
		\?) HELP				;;
		* ) warn "Unknown option '$opt'";	;;
	esac
done
shift $(($OPTIND -1))

if [[ $KEYSERVER ]]; then

	KEYSERVERANDPORT=$(echo $KEYSERVER | grep ":")
	if [[ ! $KEYSERVERANDPORT ]]; then
	   echo -e "${RED}Error: please enter a keyserver and a port, like so: sudo launchpad-getkeys -k SERVER:PORT${NC}"
	   exit 0
	fi
fi

if [[ $PROXY ]]; then

	PROXYSERVERANDPORT=$(echo $PROXY | grep ":")
	if [[ ! $PROXYSERVERANDPORT ]]; then
	   echo -e "${RED}Error: please enter a proxyserver and a port, like so: sudo launchpad-getkeys -p http://PROXYSERVER:PORT${NC}"
	   exit 0
	fi
fi

if [[ ! $PROXY ]]; then
	PROXY=$http_prox
fi

echo -e "${GREEN}\nPlease wait... launchpad-getkeys is running an update so
it can detect the missing GPG keys${NC}"
apt-get update -qq 2> /tmp/updateresults


MISSINGGEYS=$(cat /tmp/updateresults)

PROXY_OPTS=()
if [[ ! -z ${PROXY:-} ]]; then
    PROXY_OPTS=( --keyserver-options http-proxy=$PROXY )
fi

if [[ $MISSINGGEYS ]]; then

declare -a IMPORTED_KEYS=()

echo -e "${GREEN}\nTrying to import all the missing keys${NC}"

	IFS=$'\n'
	n=1
	while read curline; do
		GPGKEYTOGET=$(echo $curline | grep NO_PUBKEY | sed -e 's/.*: \|NO_PUBKEY //g')
        [ -z "${GPGKEYTOGET}" ] && continue # Skip empty values
        [[ " ${IMPORTED_KEYS[@]} " =~ " ${GPGKEYTOGET} " ]] && continue # Skip repeatable keys
        GPGTMPHOME=$(mktemp -d /tmp/gpg-tmp-home.XXXXXXXXXX)
        KEYBOX=$GPGTMPHOME/pubring.gpg
        KEYSRV_OPTS=( --keyserver hkp://keyserver.ubuntu.com:80 )
		if [[ $KEYSERVER ]]; then
            KEYSRV_OPTS=( --keyserver hkp://$KEYSERVER )
    fi

		gpg --ignore-time-conflict --no-options --no-default-keyring \
            --no-auto-check-trustdb --trust-model always \
            --homedir "$GPGTMPHOME"                      \
            --keyring "$KEYBOX"          \
            "${KEYSRV_OPTS[@]}"  "${PROXY_OPTS[@]}"                    \
            --recv $GPGKEYTOGET  2>$GPGTMPHOME/gpg.stderr
        >&2 cat $GPGTMPHOME/gpg.stderr
        TGT_NAME_BASE=$(cat  $GPGTMPHOME/gpg.stderr \
                | grep -F -m 1 "public key" \
                | sed -e 's/^[^"]*"//' \
                | sed -e 's/"[^"]*//' \
                | sed -e 's/ /__/g' \
                | sed -e 's/[<>:]//g')

        TGT_GPG_DIR=/etc/apt/trusted.gpg.d
        mkdir -p $TGT_GPG_DIR
        TGT_GPG="${TGT_GPG_DIR}/launchpad-getkeys_imported__${TGT_NAME_BASE}__${GPGKEYTOGET}.gpg"
        [ -f "$TGT_GPG" ] && rm -f "$TGT_GPG"
        gpg --ignore-time-conflict --no-options --no-default-keyring \
            --no-auto-check-trustdb --trust-model always \
            --homedir "$GPGTMPHOME" --keyring "$KEYBOX"  \
            --export  --output $TGT_GPG
        echo -e "${GREEN}Key $GPGKEYTOGET added at $TGT_GPG_DIR${NC}"
        rm -Rf $GPGTMPHOME
        IMPORTED_KEYS+=($GPGKEYTOGET)
		let n=n+1
	done < /tmp/updateresults

	echo -e "${GREEN}\nlaunchpad-getkeys has finished importing all missing GPG keys.
Try running "sudo apt-get update" - you shouldn't see any key
errors anymore${NC}"
else
	echo -e "${GREEN}\nThere are no missing GPG keys!${NC}"
fi

rm /tmp/updateresults
