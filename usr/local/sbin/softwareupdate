#!/bin/bash
# softwareupdate - Actualiza paquetes instalados mediante aptitude o apt-get, flatpak, snap y realiza limpieza
# 2013-2025 Esteban M. Navas Martín <algodelinux@gmail.com>.
#

export VERSION=1.9

# Usar preferentemente aptitude y, si no se encuentra instalado, usar apt-get
APT_COMMAND=$(command -v aptitude)
[ -z "$APT_COMMAND" ] && APT_COMMAND=$(command -v apt-get)

APT_ARGS="-y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold"

convert_seconds() {
    local SEGUNDOS=$1

    # Validar que el parámetro sea un número positivo
    if ! [[ $SEGUNDOS =~ ^[0-9]+$ ]]; then
        echo "Error: El parámetro debe ser un número entero positivo."
        return 1
    fi

    # Calcular los valores
    local DIAS=$(( SEGUNDOS / 86400 ))
    local HORAS=$(( (SEGUNDOS % 86400) / 3600 ))
    local MINUTOS=$(( (SEGUNDOS % 3600) / 60 ))
    local SEGUNDOS_RESTANTES=$(( SEGUNDOS % 60 ))

    # Construir el resultado dinámicamente
    local RESULTADO=""
    [ $DIAS -gt 0 ] && RESULTADO="$RESULTADO$DIAS días, "
    [ $HORAS -gt 0 ] && RESULTADO="$RESULTADO$HORAS horas, "
    [ $MINUTOS -gt 0 ] && RESULTADO="$RESULTADO$MINUTOS minutos, "
    [ $SEGUNDOS_RESTANTES -gt 0 ] && RESULTADO="$RESULTADO$SEGUNDOS_RESTANTES segundos, "

    # Eliminar la última coma y espacio
    RESULTADO=${RESULTADO%, }

    echo "$RESULTADO"
}

print_help() {
        echo "$(basename $0) $VERSION"
        echo "Actualizar el software del equipo"
        echo ""
        echo "Uso: $0 [OPTIONS]"
        echo "Opciones reconocidas:"
        echo "  -h               mostrar esta ayuda y salir."
        echo "  -S               apagar el equipo al finalizar el proceso de actualización."
        echo "  -R               reiniciar el equipo al finalizar el proceso de actualización."
        echo ""
}

killprocess() {

   updatehour=$(ps aux|grep $1 | grep -v grep | head -1 | awk '{print $9}')
   if [ -n $updatehour ]; then
      timestampupdate=$(date -d "$updatehour" +'%s')
      timestampnow=$(date +'%s')
      diference=$(($timestampnow - $timestampupdate))
      minutesfromupdate=$(($diference / 60))

      if [[ $minutesfromupdate -gt $2 ]]; then
         # Matamos proceso
         pkill -9 $1 2>/dev/null
      fi
   fi
}

disable_failed_repositories () {
  # Deshabilitamos los repositorios que fallan de /etc/apt/sources.list.d
  if [ -s /tmp/failedrepositories ]; then
     while read repository; do
       failedfilerepository=$(find /etc/apt/sources.list.d/ -iname "*.list" -exec grep -H "$repository" {} \; | cut -f1 -d":")
       mv $failedfilerepository $failedfilerepository.disabled
     done </tmp/failedrepositories
  fi
}

enable_repositories () {
  # Habilitamos los repositorios deshabilitados en /etc/apt/sources.list.d
  for file in $(find /etc/apt/sources.list.d/ -iname "*.disabled"); do
    [ -f $file ] && mv -f "$file" "${file%%.disabled}"
  done
}

wait_while_locked () {
   [ -x /usr/local/sbin/wait_for_apt_or_dpkg ] && timeout $TIMEOUT_FOR_DPKG_OR_APT /usr/local/sbin/wait_for_apt_or_dpkg
}

solveapterrors() {
  set +e

  idioma=$LC_ALL
  export LC_ALL=C

  TIMEOUT_UNITS=${TIMEOUT_FOR_DPKG_OR_APT: -1}
  TIMEOUT_NUMBER=${TIMEOUT_FOR_DPKG_OR_APT:: -1}

  case "$TIMEOUT_UNITS" in
     "s")  AFTER_TIMEOUT=$TIMEOUT_NUMBER
           ;;
     "m")  AFTER_TIMEOUT=$(($TIMEOUT_NUMBER * 60))
           ;;
     "h")  AFTER_TIMEOUT=$((expr $TIMEOUT_NUMBER * 3600))
           ;;
     "d")  AFTER_TIMEOUT=$((expr $TIMEOUT_NUMBER * 86400))
           ;;
  esac

  # Matamos procesos detenidos
  stopped_processes=$(ps auwx | awk 'NR>1 && $8 ~ "T" {print $2}')
  if [ "$stopped_processes" ]; then kill -9 $stopped_processes; fi

  # Matamos sinc_puppet si está corriendo desde hace más de xx minutos
  if [ $(pgrep -c sinc_puppet) -gt 0 ]; then killprocess sinc_puppet $TIMEOUT_FOR_SINC_PUPPET; fi

  # Reinstalamos paquetes en muy mal estado o los desinstalamos si no se pueden reinstalar
  wait_while_locked; very_bad_state_packages=$(dpkg -l|grep "^.HR" | awk '{print $2}')
  if [ "$very_bad_state_packages" ]; then
     for packagename in $very_bad_state_packages; do
         mv /var/lib/dpkg/info/$packagename.* /tmp/
         wait_while_locked; dpkg --purge --force-all $packagename
         wait_while_locked; run_aptitude -y install -o Dpkg::Options::="--force-confold" $packagename
         if [ $? -ne 0 ]; then
            wait_while_locked; dpkg --purge --force-all $packagename
         fi
     done
  fi

  # Desinstalamos paquetes en estado de inconsistencia
  wait_while_locked; inconsistent_packages=$(dpkg -l|grep ^iU | awk '{print $2}')
  if [ "$inconsistent_packages" ]; then
     for packagename in $inconsistent_packages; do
         mv /var/lib/dpkg/info/$packagename.* /tmp/
         wait_while_locked; dpkg --remove --force-remove-reinstreq $packagename
     done 
  fi

  # Reinstalamos paquetes a medio instalar o los desinstalamos si no se pueden reinstalar
  wait_while_locked; bad_packages=$(dpkg -l | grep -e ^iF -e ^ri | awk '{print $2}')
  if [ "$bad_packages" ]; then
     wait_while_locked; run_aptitude -y install -o Dpkg::Options::="--force-confold" $bad_packages
     wait_while_locked; bad_packages=$(dpkg -l | grep -e ^iF -e ^ri | awk '{print $2}')
     if [ "$bad_packages" ]; then
        wait_while_locked; run_aptitude remove -y $bad_packages
        if [ $? -ne 0 ]; then
           wait_while_locked; dpkg --purge --force-all $bad_packages
        fi
     fi
  fi

  wait_while_locked; apt-get check 1>/dev/null 2>/tmp/apterrors

  if [ -s /tmp/apterrors ]; then
     if [ -n "$(grep 'Unable to acquire the dpkg frontend lock' /tmp/apterrors)" ]; then
        if [ $(pgrep -c aptitude) -gt 0 ]; then killprocess aptitude $AFTER_TIMEOUT; fi
        if [ $(pgrep -c apt-get) -gt 0 ]; then killprocess apt-get $AFTER_TIMEOUT; fi
        if [ $(pgrep -c dpkg) -gt 0 ]; then killprocess dpkg $AFTER_TIMEOUT; fi
     fi

     grep "Unmet dependencies." /tmp/apterrors 2>/dev/null && wait_while_locked; apt-get -yf install && wait_while_locked; dpkg --configure -a && wait_while_locked; apt-get -y --no-install-recommends autoremove
     grep "dpkg was interrupted, you must manually run 'dpkg --configure -a' to correct the problem." /tmp/apterrors 2>/dev/null && wait_while_locked; dpkg --configure -a && wait_while_locked; apt-get -yf install && wait_while_locked; apt-get -y --no-install-recommends autoremove
     grep -E 'Encountered a section with no Package: header|Problem with MergeList ' /tmp/apterrors 2>/dev/null && rm -r /var/lib/apt/lists/*; wait_while_locked; $APT_COMMAND $APT_ARGS update; wait_while_locked; dpkg --configure -a; wait_while_locked; apt-get -yf install
  fi

  export LC_ALL=$idioma
}

check_apt_update() {
  # Archivo usado para comprobar la última ejecución de `apt update`
  local CACHE_FILE="/var/lib/apt/lists/"

  # Calcular la antigüedad del archivo
  local LAST_UPDATE=$(stat -c %Y "$CACHE_FILE")
  local CURRENT_TIME=$(date +%s)
  local AGE=$((CURRENT_TIME - LAST_UPDATE))
  local LIMIT=$(convert_seconds $THRESHOLD_FOR_APT_UPDATE)

  # Comprobar si ha pasado más tiempo que el umbral
  if [ "$AGE" -gt "$THRESHOLD_FOR_APT_UPDATE" ]; then
    echo -e "${GREEN}Han pasado más de $LIMIT desde la última ejecución de 'aptitude update'. Ejecutándolo ahora...${NC}"
    $APT_COMMAND $APT_ARGS update | grep '^Err:' | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%-]*" > /tmp/failedrepositories
  else
    echo -e "${GREEN}No es necesario ejecutar 'aptitude update'. Última ejecución hace menos de $LIMIT.${NC}"
  fi
}

apagar_equipo() {
  # Apagar el equipo si el usuario pasó el parámetro -S
  if [ $SHUTDOWN = true ]; then wait_while_locked; /sbin/poweroff; fi
}

reiniciar_equipo() {
  # Reiniciar el equipo si el usuario pasó el parámetro -R
  if [ $REBOOT = true ]; then wait_while_locked; /sbin/reboot; fi
}


SHUTDOWN=false # No apagar
REBOOT=false   # No reiniciar
THRESHOLD_FOR_APT_UPDATE=$((30 * 60)) # Definir el umbral de tiempo en segundos (por defecto 30 minutos = 1800 segundos)

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

if (( $EUID != 0 )); then
   echo -e "${RED}Please run with SUDO or root user account${NC}"
   exit 1
fi

TIMEOUT_FOR_DPKG_OR_APT="3m"

# Leer y procesar argumentos
while getopts "hSR" opt
do
    case $opt in
        h ) print_help
            exit ;;
        S ) SHUTDOWN=true ;;
        R ) REBOOT=true ;;
        \? ) echo "Opcion invalida -$OPTARG"
          exit 1 ;;
        : ) echo "Opcion -$OPTARG requiere un argumento"
          exit 1 ;;
    esac
done
shift $((OPTIND-1))

lockfile="/tmp/softwareupdate.lock"
trap "rm -f $lockfile" EXIT
touch $lockfile

# Obtenemos claves públicas de repositorios si se encuentra launchpad-getkeys
[ -x /usr/local/sbin/launchpad-getkeys ] && echo -e "${GREEN}\nObteniendo claves públicas de repositorios...${NC}" && /usr/local/sbin/launchpad-getkeys

# Resolvemos errores de apt, si los hay
wait_while_locked; solveapterrors

# Instalamos el paquete linux-headers-generic-hwe-22.04 si el paquete linux-image-generic-hwe-22.04 se encuentra instalado
if dpkg -l | grep -q "^ii  linux-image-generic-hwe-22.04 " && ! dpkg -l | grep -q "ii  linux-headers-generic-hwe-22.04 "; then
   $APT_COMMAND $APT_ARGS install linux-headers-generic-hwe-22.04
fi

# Si existen paquetes deb actualizables, los actualizamos
UPDATES=$(apt-get -s upgrade | grep "Inst" | wc -l)
if [ "$UPDATES" -gt 0 ]; then
   [ -x $APT_COMMAND ] && echo -e "${GREEN}\nActualizando paquetes...\n${NC}" && wait_while_locked; solveapterrors; check_apt_update; disable_failed_repositories; $APT_COMMAND $APT_ARGS upgrade; enable_repositories
else
   echo -e "\n${GREEN}Los paquetes deb del sistema se encuentran completamente actualizados.${NC}"
fi

# Si se encuentra instalado flatpak, actualizamos el software instalado mediante flatpak
[ -x /usr/bin/flatpak ] && echo -e "${GREEN}\nActualizando software instalado mediante flatpak...\n${NC}"  && /usr/bin/flatpak update -y

# Si se encuentra instalado snap, actualizamos el software instalado mediante snap
[ -x /usr/bin/snap ] && echo -e "${GREEN}\nActualizando software instalado via snap...\n${NC}"  && /usr/bin/snap refresh

# Realizamos limpieza de paquetes
echo -e "${GREEN}\nRealizando limpieza de paquetes...\n${NC}"

wait_while_locked; apt-get -fy install &&
wait_while_locked; dpkg --configure -a &&
wait_while_locked; apt-get -y remove --purge $(dpkg -l| grep ^rc | awk '{print $2}') &&
#wait_while_locked; apt-get -y --no-install-recommends autoremove &&
wait_while_locked; $APT_COMMAND -y clean

[ $(which flatpak) ] && flatpak uninstall --unused -y
[ $(which snap) ] && LANG=C snap list --all | awk '/disabled/{print $1, $3}' |
  while read snapname revision; do
     snap remove "$snapname" --revision="$revision"
  done

[ -f /tmp/apterrors ] && rm -f /tmp/apterrors

apagar_equipo && reiniciar_equipo

rm -f $lockfile
