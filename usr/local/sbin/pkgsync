#! /bin/bash
#
# pkgsync - Automated package synchronization tool
# 2004-2007 Steinar H. Gunderson <sgunderson@bigfoot.com>.
# 2013-2024 Esteban M. Navas Martín <algodelinux@gmail.com>.
#

set -e
set -o noglob
export DEBIAN_FRONTEND=noninteractive
export VERSION=2.39

RED='\e[0;31m'
GREEN='\e[0;32m'
YELLOW='\e[0;33m'
NC='\e[0m' # No Color

print_help () {
	echo "pkgsync $VERSION"
	echo "Automated package synchronization tool"
	echo ""
	echo "Usage: pkgsync [OPTIONS]"
	echo "Recognized options:"
	echo "  -h,  --help			display this help and exit"
	echo "  -v,  --version		display pkgsync version and exit"
	echo "  -k,  --keep-unused		don't remove unused packages"
	echo "  -e,  --ensure-essential	don't remove required, important and standard packages"
	echo "  -s,  --simulate		simulate and print out which packages would be installed/uninstalled or updated"
	echo "  -t,  --test-files		test pkgsync files"
	echo "  -tr, --test-files r		test and remove packages from pkgsync files lists"
	echo "  -d,  --delete-files		delete all pkgsync files"
	echo "  -b,  --build-files		build musthave and create empty mayhave and maynothave if they don't exist"
	echo "  -f,  --force			force pkgsync"
	echo "  -c,  --clean			remove uninstalled packages and clean cache"
	echo "  -C,  --clean-and-purge	remove uninstalled packages, delete their config files and clean cache"
	echo "  -p,  --purge-old-kernels	remove old kernels keeping the last two (by default)"
	echo "				or the number specified in /etc/default/pkgsync file"
	echo "  -n,  --no-sincpuppet		don't launch sinc_puppet from pkgsync"
	echo "  -i,  --ignore-failed-repos	ignore failed repositories"
	echo "  -g,  --get-keys		exec launchpad-keys to get repositories keys"
	echo "  -S,  --shutdown		shutdown machine after pkgsync"
	echo "  -R,  --reboot			reboot machine after pkgsync"
	echo "  -Rw, --reboot w		reboot machine and boot into windows on EFI computers"
	echo ""
	echo "Complete documentation can be found in /usr/share/doc/pkgsync/README.Debian."
}

test_files () {
  set +e
  :>/var/log/pkgsync/removefromlists.log

  for fichero in $(find /etc/pkgsync -type f -not -name "*.all" -not -name "*.bak*" -not -name "musthave.[[:digit:]]*"); do
      if [ -s "$fichero" ]; then
         for linea in $(sed '/^[[:blank:]]*#/d;s/#.*//;' $fichero); do
            paquete=$(echo $linea | cut -f1 -d" ")
            echo "Checking $fichero: $paquete"

            LC_ALL=C apt-cache --quiet=0 policy $paquete 2>&1 | tr -d " " | grep -e 'Candidate:(none)' -e 'N:Unabletolocatepackage' 2>&1>/dev/null

            if [ $? -eq 0 ]; then
               echo -e "Package $paquete in file $fichero isn't in repositories" | tee -a /var/log/pkgsync/removefromlists.log
            fi
         done
      fi
  done
  echo "See /var/log/pkgsync/removefromlists.log"
  set -e
}

delete_files () {
  find /etc/pkgsync/ -not -type d -exec rm -f {} \;
}

remove_packages_from_lists () {
  :>/var/log/pkgsync/removedfromlists.log

  if [ -s /var/log/pkgsync/removefromlists.log ]; then
     while read linea; do
        paquete=$(echo $linea | cut -f2 -d" ")
        fichero=$(echo $linea | cut -f5 -d" ")

        echo -e "Removed package $paquete from file $fichero" | tee -a /var/log/pkgsync/removedfromlists.log

        # Comentamos la línea que contiene el nombre del paquete
        sed -i "s|^$paquete|#$paquete|" $fichero
     done < /var/log/pkgsync/removefromlists.log
     echo -e "${GREEN}See /var/log/pkgsync/removedfromlists.log${NC}"
  fi
}

disable_failed_repositories () {
  # Deshabilitamos los repositorios que fallan de /etc/apt/sources.list.d
  if [ -s /tmp/failedrepositories ]; then
     while read repository; do
       failedfilerepository=$(find /etc/apt/sources.list.d/ -iname "*.list" -exec grep -H "$repository" {} \; | cut -f1 -d":")
       mv $failedfilerepository $failedfilerepository.disabled
     done </tmp/failedrepositories
  fi
}

enable_repositories () {
  # Habilitamos los repositorios deshabilitados en /etc/apt/sources.list.d
  for file in $(find /etc/apt/sources.list.d/ -iname "*.disabled"); do
    [ -f $file ] && mv -f "$file" "${file%%.disabled}"
  done
}

wait_while_locked () {
   [ -x /usr/local/sbin/wait_for_apt_or_dpkg ] && timeout $TIMEOUT_FOR_DPKG_OR_APT /usr/local/sbin/wait_for_apt_or_dpkg
}

# Largely adapted from /usr/lib/getopt/parse.bash
parse_options () {
	TEMP=`getopt -o hvft::dbkescCpngiSR:: --long help,version,force,test-files::,delete-files,build-files,keep-unused,ensure-essential,simulate,clean,clean-and-purge,purge-old-kernels,no-sincpuppet,get-keys,ignore-failed-repos,shutdown,reboot:: -n 'pkgsync' -- "$@"`

        if [ $? != 0 ] ; then echo -e "${RED}Terminating...${NC}" >&2 ; exit 1 ; fi

	eval set -- "$TEMP"

	APTITUDE_ARGS="-y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold"
	GLOB_STYLE="aptitude"

	while :; do
		case "$1" in
			-s|--simulate)
				APTITUDE_ARGS="$APTITUDE_ARGS -s"
				shift
				;;
			-k|--keep-unused)
				APTITUDE_ARGS="$APTITUDE_ARGS -o Aptitude::Delete-Unused=false"
				shift
				;;
			-e|--ensure-essential)
				ENSURE_ESSENTIAL="yes"
				shift
				;;
			-f|--force)
				FORCE=true
				shift
				;;
			-c|--clean)
				CLEAN="yes"
				shift
				;;
			-C|--clean-and-purge)
				CLEAN="purge"
				shift
				;;
			-p|--purge-old-kernels)
				PURGE_OLD_KERNELS="yes"
				shift
				;;
			-n|--no-sincpuppet)
				LAUNCH_SINC_PUPPET="no"
				shift
				;;
			-g|--get-keys)
				LAUNCHPAD_GETKEYS="yes"
				shift
				;;
			-i|--ignore-failed-repos)
				ABORT_ON_FAILED_REPOS="no"
				shift
				;;
			-S|--shutdown)
				SHUTDOWN=true
				shift
				;;
			-R|--reboot)
				REBOOT=true
                                case "$2" in
                                   "") shift 2 ;;
                                   "w") AUTOMATIC_REBOOT_INTO_WINDOWS=yes; shift 2 ;;
                                   *)  shift 2 ;;
                                esac
				;;
			-t|--test-files)
				test_files
                                if [ "$2" = "r" ]; then remove_packages_from_lists; fi
				exit 0
				;;
			-d|--delete-files)
				delete_files
				exit 0
				;;
			-b|--build-files)
				/usr/local/sbin/musthave-build
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-v|--version)
				echo "$(basename $0) $VERSION"
				exit 0
				;;
			--)
				shift
				break
				;;
			*)
				echo -e "${RED}Internal error: doesn't recognize argument '$1'${NC}"
				exit 1
				;;
		esac
	done
}

readpkgs () {
	grep -vE '^#' "$1" | grep -vE '^\s*$' | tr -d " \t"
}

getpkgs () {
	IFS="
"
	for pkg in $( readpkgs $1 ); do
		# if the line starts with "debtags:", it's a debtags expression,
		# so run it through debtags.
		if echo "$pkg" | grep -Eq '^debtags:'; then
			if ! [ "$USE_DEBTAGS" ]; then
				echo Error: "debtags:" line encountered, but debtags is not installed. Stopping.
				exit 1
			fi
			PATTERN=$( echo "$pkg" | cut -d: -f2- )
			debtags grep "$PATTERN" | tagcoll copy | cut -d: -f1
		else
			# if the line is "meta:current-kernel", use the kernel package
			# for the currently running kernel, if it exists
			if [ "$pkg" = "meta:current-kernel" ]; then
				KVERS=$( uname -r )
				wait_while_locked; aptitude -F '%p' search ".*-image-$KVERS$" | sed "s/ \+$//" 2>/dev/null || true
			else
				# if there's a wildcard in this, push it through aptitude
				# to glob. if not, just print it out.
				if echo "$pkg" | grep -Eq '[][*?()|~]'; then
				   wait_while_locked; aptitude -F '%p' search "$pkg" | sed "s/ \+$//" 2>/dev/null || true
				else
	  			   echo "$pkg"
				fi
			fi
		fi
	done
}

list_essential_packages() {
  # Priorities for build a list of essential packages
  priorities=(required important standard)

  for priority in "${priorities[@]}"; do
    dpkg-query -W --showformat='${Package}\t${Priority}\n' | grep "$priority$" | sed "s/\t$priority//g" | sort
  done
}

merge_files() {
  if [ $ENSURE_ESSENTIAL = "yes" ]; then
     list_essential_packages >> /tmp/essential_packages
  else
     :> /tmp/essential_packages
  fi

  # Merge files
  sort -u -o /etc/pkgsync/musthave.all $MUSTHAVE /etc/pkgsync/musthave.ies $(find /etc/pkgsync/musthave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null) /tmp/essential_packages
  sort -u -o /etc/pkgsync/maynothave.all $MAYNOTHAVE /etc/pkgsync/maynothave.ies $(find /etc/pkgsync/maynothave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null)
  sort -u -o /etc/pkgsync/mayhave.all $MAYHAVE /etc/pkgsync/mayhave.ies $(find /etc/pkgsync/mayhave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null)

  # Remove empty lines, blank spaces, tabs and comments
  sed -i 's/^ *//; s/ *$//; /^$/d; /^\s*$/d; s/^\t*//; s/\t*$//; /^[[:blank:]]*#/d;s/#.*//;' /etc/pkgsync/musthave.all
  sed -i 's/^ *//; s/ *$//; /^$/d; /^\s*$/d; s/^\t*//; s/\t*$//; /^[[:blank:]]*#/d;s/#.*//;' /etc/pkgsync/mayhave.all
  sed -i 's/^ *//; s/ *$//; /^$/d; /^\s*$/d; s/^\t*//; s/\t*$//; /^[[:blank:]]*#/d;s/#.*//;' /etc/pkgsync/maynothave.all

  # Remove maynothave.all and musthave.orphan packages from musthave.all
  comm -23 /etc/pkgsync/musthave.all /etc/pkgsync/musthave.orphan > /tmp/musthave.all
  comm -23 /tmp/musthave.all /etc/pkgsync/maynothave.all > /etc/pkgsync/musthave.all
}

wait_for_apt_or_dpkg() {
  # Esperamos mientras se esté realizando una actualización de índices o una actualización de paquetes
  if [ $(lsof /var/lib/apt/lists/lock 2>/dev/null | awk '{print $1}' | tail -1) ] || [ $(lsof /var/lib/dpkg/lock 2>/dev/null | awk '{print $1}' | tail -1) ] || [ $(lsof /var/lib/dpkg/lock-frontend 2>/dev/null | awk '{print $1}' | tail -1) ]; then
     echo -e "${YELLOW}Esperando mientras se actualizan índices o paquetes...${NC}"
  fi
  while [ $(lsof /var/lib/apt/lists/lock 2>/dev/null | awk '{print $1}' | tail -1) ] || [ $(lsof /var/lib/dpkg/lock 2>/dev/null | awk '{print $1}' | tail -1) ] || [ $(lsof /var/lib/dpkg/lock-frontend 2>/dev/null | awk '{print $1}' | tail -1) ]; do
     sleep 1
  done
}

run_aptitude() {

  if [[ $@ == *full-upgrade* ]]; then
     :> /var/log/pkgsync/removefromlists.log

     COMMAND="aptitude $APTITUDE_ARGS $@"

     # Bucle para reintentar el comando mientras haya errores
     retry=1
     while [ $retry -eq 1 ]; do
         echo RUNNING: $COMMAND
         wait_while_locked; LC_ALL=C $COMMAND | tee /tmp/apterrors

         problematic_package=$(grep 'Couldn'\''t find any package' /tmp/apterrors | cut -d'"' -f2)

         if [ -n "$problematic_package" ]; then
            echo -e "Package $problematic_package isn't in repositories" | tee -a /var/log/pkgsync/removefromlists.log
            COMMAND=$(echo "$COMMAND" | sed "s/${problematic_package}[^[:space:]]*//" | tr -s ' ')
         else
            retry=0
         fi
     done
  else
     echo RUNNING: aptitude $APTITUDE_ARGS "$@"
     wait_while_locked; aptitude $APTITUDE_ARGS "$@"
  fi

  return $?
}

run_debtags() {
  if [ "$USE_DEBTAGS" ]; then
     echo RUNNING: debtags "$@"
     debtags "$@"
  fi
}

# The beautiful look of hacks in the morning...
filter() {
	echo "$@" | tr " " "\n" | sort | uniq -c | grep "     2" | cut -c9-
}

function version_ge() { test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1"; }

killprocess() {

   updatehour=$(ps aux|grep $1 | grep -v grep | head -1 | awk '{print $9}')
   if [ -n $updatehour ]; then
      timestampupdate=$(date -d "$updatehour" +'%s')
      timestampnow=$(date +'%s')
      diference=$(($timestampnow - $timestampupdate))
      minutesfromupdate=$(($diference / 60))

      if [ "$minutesfromupdate" -gt "$2" ]; then
         # Matamos proceso
         pkill -9 $1 2>/dev/null
      fi
   fi
}

solveapterrors() {
  set +e

  idioma=$LC_ALL
  export LC_ALL=C

  TIMEOUT_UNITS=${TIMEOUT_FOR_DPKG_OR_APT: -1}
  TIMEOUT_NUMBER=${TIMEOUT_FOR_DPKG_OR_APT:: -1}

  case "$TIMEOUT_UNITS" in
     "s")  AFTER_TIMEOUT=$TIMEOUT_NUMBER
           ;;
     "m")  AFTER_TIMEOUT=$(($TIMEOUT_NUMBER * 60))
           ;;
     "h")  AFTER_TIMEOUT=$((expr $TIMEOUT_NUMBER * 3600))
           ;;
     "d")  AFTER_TIMEOUT=$((expr $TIMEOUT_NUMBER * 86400))
           ;;
  esac

  # Matamos procesos detenidos
  stopped_processes=$(ps auwx | awk 'NR>1 && $8 ~ "T" {print $2}')
  if [ "$stopped_processes" ]; then kill -9 $stopped_processes; fi

  # Matamos sinc_puppet si está corriendo desde hace más de xx minutos
  if [ $(pgrep -c sinc_puppet) -gt 0 ]; then killprocess sinc_puppet $TIMEOUT_FOR_SINC_PUPPET; fi

  # Reinstalamos paquetes en muy mal estado o los desinstalamos si no se pueden reinstalar
  wait_while_locked; very_bad_state_packages=$(dpkg -l|grep "^.HR" | awk '{print $2}')
  if [ "$very_bad_state_packages" ]; then
     for packagename in $very_bad_state_packages; do
         mv /var/lib/dpkg/info/$packagename.* /tmp/
         wait_while_locked; dpkg --purge --force-all $packagename
         wait_while_locked; run_aptitude -y install -o Dpkg::Options::="--force-confold" $packagename
         if [ $? -ne 0 ]; then
            wait_while_locked; dpkg --purge --force-all $packagename
         fi
     done
  fi

  # Desinstalamos paquetes en estado de inconsistencia
  wait_while_locked; inconsistent_packages=$(dpkg -l|grep ^iU | awk '{print $2}')
  if [ "$inconsistent_packages" ]; then
     for packagename in $inconsistent_packages; do
         mv /var/lib/dpkg/info/$packagename.* /tmp/
         wait_while_locked; dpkg --remove --force-remove-reinstreq $packagename
     done 
  fi

  # Reinstalamos paquetes a medio instalar o los desinstalamos si no se pueden reinstalar
  wait_while_locked; bad_packages=$(dpkg -l | grep -e ^iF -e ^ri | awk '{print $2}')
  if [ "$bad_packages" ]; then
     wait_while_locked; run_aptitude -y install -o Dpkg::Options::="--force-confold" $bad_packages
     wait_while_locked; bad_packages=$(dpkg -l | grep -e ^iF -e ^ri | awk '{print $2}')
     if [ "$bad_packages" ]; then
        wait_while_locked; run_aptitude remove -y $bad_packages
        if [ $? -ne 0 ]; then
           wait_while_locked; dpkg --purge --force-all $bad_packages
        fi
     fi
  fi

  wait_while_locked; apt-get check 1>/dev/null 2>/tmp/apterrors

  if [ -s /tmp/apterrors ]; then
     if [ -n "$(grep 'Unable to acquire the dpkg frontend lock' /tmp/apterrors)" ]; then
        if [ $(pgrep -c aptitude) -gt 0 ]; then killprocess aptitude $AFTER_TIMEOUT; fi
        if [ $(pgrep -c apt-get) -gt 0 ]; then killprocess apt-get $AFTER_TIMEOUT; fi
        if [ $(pgrep -c dpkg) -gt 0 ]; then killprocess dpkg $AFTER_TIMEOUT; fi
     fi

     grep "Unmet dependencies." /tmp/apterrors 2>/dev/null && wait_while_locked; run_aptitude -yf install; wait_while_locked; dpkg --configure -a
     grep "dpkg was interrupted, you must manually run 'dpkg --configure -a' to correct the problem." /tmp/apterrors 2>/dev/null && wait_while_locked; dpkg --configure -a; run_aptitude -yf install
     grep -E 'Encountered a section with no Package: header|Problem with MergeList ' /tmp/apterrors 2>/dev/null && rm -r /var/lib/apt/lists/*; wait_while_locked; run_aptitude update; wait_while_locked; dpkg --configure -a; wait_while_locked; run_aptitude -yf install
  fi

  # Aseguramos la actualización de pkgsync
  wait_while_locked; apt-cache search '~U' | grep -oE pkgsync >/dev/null 2>&1 && run_aptitude -yf install pkgsync

  export LC_ALL=$idioma
}

eliminar_kernels() {
  # Eliminar kernels antiguos siempre y cuando se haya elegido esta opción y se encuentre /usr/local/sbin/purge-old-kernels
  if [ $PURGE_OLD_KERNELS = "yes" ] && [ -x /usr/local/sbin/purge-old-kernels ]; then
     wait_while_locked; /usr/local/sbin/purge-old-kernels -s --keep $KEEP_LAST_KERNELS -qy
  fi
}

launchpad_getkeys() {
  # Obtener claves de repositorios siempre y cuando se haya elegido esta opción y se encuentre /usr/local/sbin/launchpad-getkeys
  options=""

  if [ $LAUNCHPAD_GETKEYS = "yes" ] && [ -x /usr/local/sbin/launchpad-getkeys ]; then
     [ -n "$LAUNCHPAD_GETKEYS_PROXY" ] && options+=" -p $LAUNCHPAD_GETKEYS_PROXY"
     [ $LAUNCHPAD_GETKEYS_REMOVE_EXPIRED_KEYS = "yes" ] && options+=" -r"

     launchpad-getkeys $options
  fi
}

eliminar_dependencias() {
  uninstalled_packages=$(dpkg -l| grep ^rc | awk '{print $2}')

  if [ -n "$uninstalled_packages" ]; then
     if [ $CLEAN = "yes" ]; then
        # Eliminar paquetes desinstalados
        run_aptitude -y remove --purge-unused $uninstalled_packages
     elif [ $CLEAN = "purge" ]; then
        # Eliminar paquetes desinstalados y eliminar sus ficheros de configuración
        run_aptitude -y purge $uninstalled_packages
     fi
  fi
  # Limpiar la cache de paquetes
  run_aptitude clean
}

apagar_equipo() {
  # Apagar el equipo si el usuario pasó el parámetro -S
  if [ $SHUTDOWN = true ] || [ $AUTOSHUTDOWN = true ]; then wait_while_locked;/sbin/poweroff; fi
}

reiniciar_equipo() {
  # Reiniciar el equipo si el usuario pasó el parámetro -R
  if [ $REBOOT = true ] || [ $AUTOREBOOT = true ]; then wait_while_locked;/sbin/reboot; fi
}

check_auto_shutdown() {
  time=$(date +%H%M)

  if [ -n "$AUTOMATIC_SHUTDOWN_BETWEEN" ]; then
     (echo "$AUTOMATIC_SHUTDOWN_BETWEEN" | grep -Eq ^[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}$)
     horaini=$(expr match "$AUTOMATIC_SHUTDOWN_BETWEEN" '\(..:..\)' | tr -d ':')
     horafin=$(expr "$AUTOMATIC_SHUTDOWN_BETWEEN" : '.*\(..:..\)' | tr -d ':')

     if [ "$horaini" -lt "$horafin" ]; then
        [ "$time" -ge "$horaini" ] && [ "$time" -le "$horafin" ] && AUTOSHUTDOWN=true || AUTOSHUTDOWN=false
     else
        if [ "$horaini" -gt "$horafin" ]; then
           [ "$time" -le "$horaini" ] && [ "$time" -le "$horafin" ] && AUTOSHUTDOWN=true || AUTOSHUTDOWN=false
        fi
     fi
  fi
}

check_auto_reboot() {
  time=$(date +%H%M)

  if [ -n "$AUTOMATIC_REBOOT_BETWEEN" ]; then
     (echo "$AUTOMATIC_REBOOT_BETWEEN" | grep -Eq ^[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}$)
     horaini=$(expr match "$AUTOMATIC_REBOOT_BETWEEN" '\(..:..\)' | tr -d ':')
     horafin=$(expr "$AUTOMATIC_REBOOT_BETWEEN" : '.*\(..:..\)' | tr -d ':')

     if [ "$horaini" -lt "$horafin" ]; then
        [ "$time" -ge "$horaini" ] && [ "$time" -le "$horafin" ] && AUTOREBOOT=true || AUTOREBOOT=false
     else
        if [ "$horaini" -gt "$horafin" ]; then
           [ "$time" -le "$horaini" ] && [ "$time" -le "$horafin" ] && AUTOREBOOT=true || AUTOREBOOT=false
        fi
     fi
  fi

  if [ $REBOOT ] && [ "$AUTOMATIC_REBOOT_INTO_WINDOWS" = "yes" ] && [ -x /bin/efibootmgr ]; then
     # Obtenemos el orden de arranque actual
     bootorder=$(/bin/efibootmgr | sed -n 's|^BootOrder: \(.*\)|\1|p')

     for DISK in $(lsblk --nodeps |grep disk | awk '{print $1}'); do
        EFI_DISK="/dev/$DISK"
        EFIPART=$(gdisk -l $EFI_DISK | grep -w "EFI system partition" | awk '{print $1}')

        # Creamos una entrada específica para Windows 10, si no está creada
        if [ "$EFIPART" ]; then
           /bin/efibootmgr | grep "W10IES" 2>&1 > /dev/null || /bin/efibootmgr -c -d $EFI_DISK -p $EFIPART -L "W10IES" -l "\EFI\Microsoft\Boot\bootmgfw.efi"
        fi
     done

     # Restauramos el bootorder
     /bin/efibootmgr -o $bootorder

     # Establecemos un arranque temporal de Windows
     /bin/efibootmgr -n $(/bin/efibootmgr | grep "W10IES" | cut -f1 -d" " | sed -e "s/^Boot//" -e "s/*$//") 2>&1>/dev/null
  fi
}


if (( $EUID != 0 )); then
   echo -e "${RED}Please run with SUDO or root user account${NC}"
   exit 1
fi

:>/var/log/pkgsync.log

# Matamos procesos detenidos
stopped_processes=$(ps auwx | awk 'NR>1 && $8 ~ "T" {print $2}')
if [ "$stopped_processes" ]; then kill -9 $stopped_processes; fi

# Establecemos valores por defecto
ENABLE=yes # Controlamos la ejecución manual o automática de pkgsync
HELP=false
FORCE=false
SHUTDOWN=false # No apagar
REBOOT=false   # No reiniciar
AUTOSHUTDOWN=false # No apagar
AUTOREBOOT=false   # No reiniciar
PURGE_OLD_KERNELS="no"
KEEP_LAST_KERNELS="2"
CLEAN="no"
PUPPET_SERVER=puppetinstituto
AUTOMATIC_SHUTDOWN_BETWEEN=""
AUTOMATIC_REBOOT_BETWEEN=""
AUTOMATIC_REBOOT_INTO_WINDOWS=no
LAUNCHPAD_GETKEYS=yes
LAUNCHPAD_GETKEYS_PROXY=""
LAUNCHPAD_GETKEYS_REMOVE_EXPIRED_KEYS=no
TIMEOUT_FOR_SINC_PUPPET="5"
TIMEOUT_FOR_DPKG_OR_APT="3m"
TIMEOUT_FOR_MUSTHAVE_BUILD="2m"
EFI_DISK=$(mount | grep '/boot/efi' | awk '{print $1}' | sed 's/[0-9]*//g') # Disco que contiene EFI
ABORT_ON_FAILED_REPOS="yes"
DISABLED_FAILED_REPOS=false
AUTO_TEST_FILES="no"
ALERT_EMAIL_RECEIVER=""
ALERT_EMAIL_ON_ERROR="no"
ENSURE_ESSENTIAL="no"

LAUNCH_SINC_PUPPET=yes

[ -r /etc/default/pkgsync ] && . /etc/default/pkgsync

[ -x /usr/sbin/sinc_puppet ] || LAUNCH_SINC_PUPPET="no"

parse_options "$@"

$FORCE && ENABLE=yes
if [ "$ENABLE" == "no" ] || [ ! "$ENABLE" ]; then
  echo " * [info]: La aplicación 'pkgsync' está desactivada en /etc/default/pkgsync."
  echo "           Para activarla poner el valor ENABLE=yes."
  exit 0
fi

# Definimos el fichero de lock
lockfile=/var/lock/$(basename $0)
lockfile-create $lockfile || exit 2
lockfile-touch $lockfile &
BADGER="$!"

trap "kill "${BADGER}" 2>/dev/null || true; lockfile-remove $lockfile; exit" QUIT INT TERM EXIT

# Crear el directorio /etc/pkgsync y sus subdirectorios si no existen
if [ ! -d /etc/pkgsync ]; then
   echo -e "${GREEN}Creando el directorio /etc/pkgsync ...${NC}"
   mkdir /etc/pkgsync
fi

if [ ! -d /etc/pkgsync/mayhave.d ]; then
   echo -e "${GREEN}Creando el directorio /etc/pkgsync/mayhave.d/ ...${NC}"
   mkdir -p /etc/pkgsync/mayhave.d
fi

if [ ! -d /etc/pkgsync/maynothave.d ]; then
   echo -e "${GREEN}Creando el directorio /etc/pkgsync/maynothave.d/ ...${NC}"
   mkdir -p /etc/pkgsync/maynothave.d
fi

if [ ! -d /etc/pkgsync/musthave.d ]; then
   echo -e "${GREEN}Creando el directorio /etc/pkgsync/musthave.d/ ...${NC}"
   mkdir -p /etc/pkgsync/musthave.d
fi

# Crear un fichero /etc/pkgsync/mayhave vacío si no existe
if [ ! -r /etc/pkgsync/mayhave ]; then
   echo -e "${GREEN}Creando el fichero /etc/pkgsync/mayhave ...${NC}"
   touch /etc/pkgsync/mayhave
fi

# Crear un fichero /etc/pkgsync/maynothave vacío si no existe
if [ ! -r /etc/pkgsync/maynothave ]; then
   echo -e "${GREEN}Creando el fichero /etc/pkgsync/maynothave ...${NC}"
   touch /etc/pkgsync/maynothave
fi

# Generar /etc/pkgsync/musthave si no existe el fichero con la lista de paquetes instalados en el sistema o está vacío
if [ ! -r /etc/pkgsync/musthave -o ! -s /etc/pkgsync/musthave ]; then
   timeout $TIMEOUT_FOR_MUSTHAVE_BUILD /usr/local/sbin/musthave-build

   # Si no se ha creado un fichero musthave, mostramos un error
   if [ ! -r /etc/pkgsync/musthave ]; then
      echo -e "${RED}Error: Fichero musthave no encontrado en /etc/pkgsync. Abortando.${NC}"
      echo
      echo "Please see /usr/share/doc/pkgsync/README.Debian for information on"
      echo "configuring pkgsync."

      exit 1
   fi
fi

# Check if we've got debtags installed
[ -x /usr/bin/debtags ] && USE_DEBTAGS=yes

# Determinar si se debe apagar el equipo al terminar
check_auto_shutdown

# Determinar si se debe reiniciar el equipo al terminar
check_auto_reboot

# Descargar claves de repositorios
launchpad_getkeys | tee -a /var/log/pkgsync.log

# Actualizamos los paquetes instalados
echo -e "${GREEN}Actualizando paquetes instalados...${NC}"
#solveapterrors; wait_while_locked; LC_ALL=C run_aptitude update > /tmp/apterrors 2>&1 >/dev/null
solveapterrors; wait_while_locked; LC_ALL=C run_aptitude update | tee /tmp/apterrors

# Abort if repository downloads fail (possible mirror failure).
grep -w '^W: Failed to fetch' /tmp/apterrors 2>&1 >/dev/null
if [ $? -eq 0 ]; then
   echo -e "${RED}\n[ERR] aptitude update error. Mirror sync in progress?${NC}" | tee -a /var/log/pkgsync.log
   exit 1
fi

disable_failed_repositories; run_aptitude upgrade | tee -a /var/log/pkgsync.log; enable_repositories

if [ -x /usr/sbin/sinc_puppet ]; then

   runned_sinc_puppet=false
   # Si está corriendo sinc_puppet, esperamos hasta que termine
   if [[ $(pgrep sinc_puppet) ]]; then
      echo -e "${YELLOW}Esperando a que termine sinc_puppet...${NC}"
      runned_sinc_puppet=true
   fi

   while [[ $(pgrep sinc_puppet) ]]; do
      sleep 1
   done

   # Si el servidor puppet responde, se encuentra el ejecutable de sinc_puppet, y no ha sido iniciado previamente, lo iniciamos
   [ -n "$PUPPET_SERVER" ] && ping -c1 $PUPPET_SERVER > /dev/null 2>&1

   if [ $? -eq 0 ]; then
      if [ $runned_sinc_puppet = false ]; then
         installed_version=$(dpkg -s linex-ubuntu-puppet 2>/dev/null | grep 'Version:' | cut -f2 -d" ")
         if version_ge $installed_version "2.7"; then
            if [ $LAUNCH_SINC_PUPPET = "yes" ] && [ -x /usr/sbin/sinc_puppet ]; then /usr/sbin/sinc_puppet -f now | tee -a /var/log/pkgsync.log; fi
         else
            if [ $LAUNCH_SINC_PUPPET = "yes" ] && [ -x /usr/sbin/sinc_puppet ]; then /usr/sbin/sinc_puppet -f | tee -a /var/log/pkgsync.log; fi
         fi
      fi
   fi
fi

# Update the package lists
wait_while_locked; LC_ALL=C run_aptitude update > /tmp/apterrors 2>&1 >/dev/null

# Get failed repositories
cat /tmp/apterrors | grep '^Err' | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%-]*" > /tmp/failedrepositories

if [ $ABORT_ON_FAILED_REPOS = "yes" ]; then
   # Abortamos pkgsync si algún repositorio no se encuentra accesible
   if [ -s /tmp/failedrepositories ]; then
      echo -e "${RED}\n[ERR] aptitude update error${NC}" | tee -a /var/log/pkgsync.log
      echo "The following repositories fail:" | tee -a /var/log/pkgsync.log
      cat /tmp/failedrepositories | tee -a /var/log/pkgsync.log
      echo -e "${RED}      Aborting${NC}" | tee -a /var/log/pkgsync.log
      exit 1
   fi
elif [ $ABORT_ON_FAILED_REPOS = "no" ]; then
   disable_failed_repositories
   DISABLED_FAILED_REPOS=true
fi

run_debtags update

# Create ies files if don't exists
test -f /etc/pkgsync/musthave.ies || touch /etc/pkgsync/musthave.ies
test -f /etc/pkgsync/maynothave.ies || touch /etc/pkgsync/maynothave.ies
test -f /etc/pkgsync/mayhave.ies || touch /etc/pkgsync/mayhave.ies
test -f /etc/pkgsync/musthave.orphan || touch /etc/pkgsync/musthave.orphan

if [ "$IGNORE_MUSTHAVE" = "yes" ]; then
   MUSTHAVE=""
else
   MUSTHAVE="/etc/pkgsync/musthave"
fi

if [ "$IGNORE_MAYNOTHAVE" = "yes" ]; then
   MAYNOTHAVE=""
else
   MAYNOTHAVE="/etc/pkgsync/maynothave"
fi

if [ "$IGNORE_MAYHAVE" = "yes" ]; then
   MAYHAVE=""
else
   MAYHAVE="/etc/pkgsync/mayhave"
fi

# Si el valor de ENABLE es onlyupgrade, entonces tratamos de resolver errores de apt, actualizamos paquetes y finalizamos
if [ "$ENABLE" == "onlyupgrade" ]; then
   exit 0
fi

# Merge files
merge_files

# Find out what parameters to give to aptitude.
installed=$( dpkg -l | grep '^ii' | cut -c5- | cut '-d ' -f1 )
musthave_install=$( getpkgs /etc/pkgsync/musthave.all | sort -u | sed "s/$/+/" )
maynothave_remove=$( getpkgs /etc/pkgsync/maynothave.all | sort -u | sed "s/$/-/" )
mayhave_marknonauto=$( getpkgs /etc/pkgsync/mayhave.all | sort -u | sed "s/$/\&m/" )
mustormayhave=$( ( getpkgs /etc/pkgsync/musthave.all ; getpkgs /etc/pkgsync/mayhave.all ) | sort -u )

if [ "$IGNORE_MUSTHAVE" = "no" ]; then
 rest_markauto=$( filter $installed $installed $mustormayhave | sed "s/$/\&M/" )
fi

if [ $AUTO_TEST_FILES = "yes" ]; then
   test_files; remove_packages_from_lists; merge_files
fi

run_aptitude full-upgrade '?upgradable' $musthave_install $maynothave_remove $mayhave_marknonauto $rest_markauto | tee -a /var/log/pkgsync.log
run_aptitude autoclean
eliminar_kernels;eliminar_dependencias

if [ $ABORT_ON_FAILED_REPOS = "no" ] && [ $DISABLED_FAILED_REPOS = true ]; then enable_repositories; fi

if [ $ALERT_EMAIL_ON_ERROR = "yes" ] && [ -n "$ALERT_EMAIL_RECEIVER" ]; then
   grep -e ERR -e Err /var/log/pkgsync.log > /dev/null 2>&1

   if [ $? -eq 0 ]; then
      mail -s "Error al ejecutar pkgsync en el equipo $(hostname)" "$ALERT_EMAIL_RECEIVER" < /var/log/pkgsync.log
   fi
fi

apagar_equipo;reiniciar_equipo
