#! /bin/bash
#
# pkgsync - Automated package synchronization tool
# 2004-2007 Steinar H. Gunderson <sgunderson@bigfoot.com>.
# 2013-2020 Esteban M. Navas Martín <algodelinux@gmail.com>.
#

set -e
set -o noglob
export DEBIAN_FRONTEND=noninteractive
export VERSION=1.92

print_help () {
	echo "pkgsync $VERSION"
	echo "Automated package synchronization tool"
	echo ""
	echo "Usage: pkgsync [OPTIONS]"
	echo "Recognized options:"
	echo "  -h,  --help			display this help and exit"
	echo "  -v,  --version		display pkgsync version and exit"
	echo "  -k,  --keep-unused		don't remove unused packages"
	echo "  -s,  --simulate		don't do anything, just print out what would have happened"
	echo "  -t,  --test-files		test pkgsync files"
	echo "  -tr, --test-files r		test and remove packages from pkgsync files lists"
	echo "  -d,  --delete-files		delete all pkgsync files"
	echo "  -b,  --build-files		build musthave and create empty mayhave and maynothave if they don't exist"
	echo "  -f,  --force			force pkgsync"
	echo "  -c,  --clean			remove uninstalled packages dependencies,"
	echo "				purge uninstalled packages and clean cache"
	echo "  -p,  --purge-old-kernels	remove old kernels keeping the last two (by default)"
	echo "				or the number specified in /etc/default/pkgsync file"
	echo "  -n,  --no-sincpuppet		don't launch sinc_puppet from pkgsync"
	echo "  -g,  --get-keys		exec launchpad-keys to get repositories keys"
	echo "  -S,  --shutdown		shutdown machine after pkgsync"
	echo "  -R,  --reboot			reboot machine after pkgsync"
	echo "  -Rw, --reboot			reboot machine and boot into windows on EFI computers"
	echo ""
	echo "Complete documentation can be found in /usr/share/doc/pkgsync/README.Debian."
}

test_files () {
  set +e
  :>/var/log/pkgsync/removefromlists.log

  for fichero in $(find /etc/pkgsync -type f -not -name "*.all" -not -name "*.bak*" -not -name "musthave.[[:digit:]]*"); do
      if [ -s "$fichero" ]; then

         for paquete in $(cat $fichero); do
            echo "Checking $fichero: $paquete"

            LC_ALL=C apt-cache --quiet=0 policy $paquete 2>&1 | tr -d " " | grep -e 'Candidate:(none)' -e 'N:Unabletolocatepackage' 2>&1>/dev/null

            if [ $? -eq 0 ]; then
               echo "Package $paquete in file $fichero isn't in repositories"
               echo "Package $paquete in file $fichero isn't in repositories" >> /var/log/pkgsync/removefromlists.log
            fi
         done
      fi
  done
  echo "See /var/log/pkgsync/removefromlists.log"
  set -e
}

delete_files () {
  find /etc/pkgsync/ -not -type d -exec rm -f {} \;
}

remove_packages_from_lists () {
  :>/var/log/pkgsync/removedfromlists.log

  if [ -s /var/log/pkgsync/removefromlists.log ]; then
     while read linea; do
        paquete=$(echo $linea | cut -f2 -d" ")
        fichero=$(echo $linea | cut -f5 -d" ")

        echo "Removed package $paquete from file $fichero"
        echo "Removed package $paquete from file $fichero" >> /var/log/pkgsync/removedfromlists.log

        # Comentamos la línea que contiene el nombre del paquete
        sed -i "s|$paquete|#$paquete|" $fichero
     done < /var/log/pkgsync/removefromlists.log
     echo "See /var/log/pkgsync/removedfromlists.log"
  fi
}

disable_failed_repositories () {
  # Deshabilitamos los repositorios que fallan de /etc/apt/sources.list.d
  while read repository; do
    failedfilerepository=$(find /etc/apt/sources.list.d/ -iname "*.list" -exec grep -H "$repository" {} \; | cut -f1 -d":")
    mv $failedfilerepository $failedfilerepository.disabled
  done </tmp/failedrepositories
}

enable_repositories () {
  # Habilitamos los repositorios deshabilitados en /etc/apt/sources.list.d
  for file in $(find /etc/apt/sources.list.d/ -iname "*.disabled"); do
    [ -f $file ] && mv -f "$file" "${file%%.disabled}"
  done
}

# Largely adapted from /usr/lib/getopt/parse.bash
parse_options () {
	TEMP=`getopt -o hvft::dbkscpngSR:: --long help,version,force,test-files::,delete-files,build-files,keep-unused,simulate,clean,purge-old-kernels,no-sincpuppet,get-keys,shutdown,reboot:: -n 'pkgsync' -- "$@"`
	eval set -- "$TEMP"

	APTITUDE_ARGS="-y -q -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold"
	GLOB_STYLE="aptitude"

	while :; do
		case "$1" in
			-s|--simulate)
				APTITUDE_ARGS="$APTITUDE_ARGS -s"
				shift
				;;
			-k|--keep-unused)
				APTITUDE_ARGS="$APTITUDE_ARGS -o Aptitude::Delete-Unused=false"
				shift
				;;
			-f|--force)
				FORCE=true
				shift
				;;
			-c|--clean)
				CLEAN="yes"
				shift
				;;
			-p|--purge-old-kernels)
				PURGE_OLD_KERNELS="yes"
				shift
				;;
			-n|--no-sincpuppet)
				LAUNCH_SINC_PUPPET="no"
				shift
				;;
			-g|--get-keys)
				LAUNCHPAD_GETKEYS="yes"
				shift
				;;
			-S|--shutdown)
				SHUTDOWN=true
				shift
				;;
			-R|--reboot)
				REBOOT=true
                                case "$2" in
                                   "") shift 2 ;;
                                   "w") AUTOMATIC_REBOOT_INTO_WINDOWS=yes; shift 2 ;;
                                   *)  shift 2 ;;
                                esac
				;;
			-t|--test-files)
				test_files
                                if [ "$2" = "r" ]; then remove_packages_from_lists; fi
				exit 0
				;;
			-d|--delete-files)
				delete_files
				exit 0
				;;
			-b|--build-files)
				/usr/local/sbin/musthave-build
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-v|--version)
				echo "$(basename $0) $VERSION"
				exit 0
				;;
			--)
				shift
				break
				;;
			*)
				echo "Internal error: doesn't recognize argument '$1'"
				exit 1
				;;
		esac
	done
}

readpkgs () {
	grep -vE '^#' "$1" | grep -vE '^\s*$' | tr -d " \t"
}

getpkgs () {
	IFS="
"
	for pkg in $( readpkgs $1 ); do
		# if the line starts with "debtags:", it's a debtags expression,
		# so run it through debtags.
		if echo "$pkg" | grep -Eq '^debtags:'; then
			if ! [ "$USE_DEBTAGS" ]; then
				echo Error: "debtags:" line encountered, but debtags is not installed. Stopping.
				exit 1
			fi
			PATTERN=$( echo "$pkg" | cut -d: -f2- )
			debtags grep "$PATTERN" | tagcoll copy | cut -d: -f1
		else
			# if the line is "meta:current-kernel", use the kernel package
			# for the currently running kernel, if it exists
			if [ "$pkg" = "meta:current-kernel" ]; then
				KVERS=$( uname -r )
				timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; aptitude -F '%p' search ".*-image-$KVERS$" | sed "s/ \+$//" 2>/dev/null || true
			else
				# if there's a wildcard in this, push it through aptitude
				# to glob. if not, just print it out.
				if echo "$pkg" | grep -Eq '[][*?()|~]'; then
					timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; aptitude -F '%p' search "$pkg" | sed "s/ \+$//" 2>/dev/null || true
				else
					echo "$pkg"
				fi
			fi
		fi
	done
}

merge_files() {

  # Merge files
  sort -u -o /etc/pkgsync/musthave.all $MUSTHAVE /etc/pkgsync/musthave.ies $(find /etc/pkgsync/musthave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null)
  sort -u -o /etc/pkgsync/maynothave.all $MAYNOTHAVE /etc/pkgsync/maynothave.ies $(find /etc/pkgsync/maynothave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null)
  sort -u -o /etc/pkgsync/mayhave.all $MAYHAVE /etc/pkgsync/mayhave.ies $(find /etc/pkgsync/mayhave.d -mindepth 1 -maxdepth 1 -type f 2>/dev/null)

  # Remove empty lines, blank spaces, tabs and commented lines

  sed -i 's/^ *//; s/ *$//; /^$/d; /^\s*$/d; s/^\t*//; s/\t*$//; /^[ \t]*#/d;' /etc/pkgsync/musthave.all
  sed -i 's/^ *//; s/ *$//; /^$/d; /^\s*$/d; s/^\t*//; s/\t*$//; /^[ \t]*#/d;' /etc/pkgsync/mayhave.all
  sed -i 's/^ *//; s/ *$//; /^$/d; /^\s*$/d; s/^\t*//; s/\t*$//; /^[ \t]*#/d;' /etc/pkgsync/maynothave.all

  # Remove maynothave.all and musthave.orphan packages from musthave.all
  comm -23 /etc/pkgsync/musthave.all /etc/pkgsync/musthave.orphan > /tmp/musthave.all
  comm -23 /tmp/musthave.all /etc/pkgsync/maynothave.all > /etc/pkgsync/musthave.all
}

wait_for_apt_or_dpkg() {
  # Esperamos mientras se esté realizando una actualización de índices o una actualización de paquetes
  if [ $(lsof /var/lib/apt/lists/lock 2>/dev/null | awk '{print $1}' | tail -1) ] || [ $(lsof /var/lib/dpkg/lock 2>/dev/null | awk '{print $1}' | tail -1) ] || [ $(lsof /var/lib/dpkg/lock-frontend 2>/dev/null | awk '{print $1}' | tail -1) ]; then
     echo "Esperando mientras se actualizan índices o paquetes..."
  fi
  while [ $(lsof /var/lib/apt/lists/lock 2>/dev/null | awk '{print $1}' | tail -1) ] || [ $(lsof /var/lib/dpkg/lock 2>/dev/null | awk '{print $1}' | tail -1) ] || [ $(lsof /var/lib/dpkg/lock-frontend 2>/dev/null | awk '{print $1}' | tail -1) ]; do
     sleep 1
  done
}

run_aptitude () {
  echo RUNNING: aptitude $APTITUDE_ARGS "$@"
  timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; aptitude $APTITUDE_ARGS "$@"
  return $?
}

run_debtags () {
  if [ "$USE_DEBTAGS" ]; then
     echo RUNNING: debtags "$@"
     debtags "$@"
  fi
}

# The beautiful look of hacks in the morning...
filter () {
	echo "$@" | tr " " "\n" | sort | uniq -c | grep "     2" | cut -c9-
}

function version_ge() { test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1"; }

killprocess() {

   updatehour=$(ps aux|grep $1 | grep -v grep | head -1 | awk '{print $9}')
   if [ -n $updatehour ]; then
      timestampupdate=$(date -d "$updatehour" +'%s')
      timestampnow=$(date +'%s')
      diference=$(($timestampnow - $timestampupdate))
      minutesfromupdate=$(($diference / 60))

      if [ "$minutesfromupdate" -gt "$2" ]; then
         # Matamos proceso
         pkill -9 $1 2>/dev/null
      fi
   fi
}

solveapterrors() {
  set +e

  idioma=$LC_ALL
  export LC_ALL=C

  TIMEOUT_UNITS=${TIMEOUT_FOR_DPKG_OR_APT: -1}
  TIMEOUT_NUMBER=${TIMEOUT_FOR_DPKG_OR_APT:: -1}

  case "$TIMEOUT_UNITS" in
     "s")  AFTER_TIMEOUT=$TIMEOUT_NUMBER
           ;;
     "m")  AFTER_TIMEOUT=$(($TIMEOUT_NUMBER * 60))
           ;;
     "h")  AFTER_TIMEOUT=$((expr $TIMEOUT_NUMBER * 3600))
           ;;
     "d")  AFTER_TIMEOUT=$((expr $TIMEOUT_NUMBER * 86400))
           ;;
  esac

  # Matamos procesos detenidos
  stopped_processes=$(ps auwx | awk 'NR>1 && $8 ~ "T" {print $2}')
  if [ "$stopped_processes" ]; then kill -9 $stopped_processes; fi

  # Matamos sinc_puppet si está corriendo desde hace más de xx minutos
  if [ $(pgrep -c sinc_puppet) -gt 0 ]; then killprocess sinc_puppet $TIMEOUT_FOR_SINC_PUPPET; fi

  apt-get check 1>/dev/null 2>/tmp/apterrors

  if [ -n "$(grep 'Unable to acquire the dpkg frontend lock' /tmp/apterrors)" ]; then
     if [ $(pgrep -c aptitude) -gt 0 ]; then killprocess aptitude $AFTER_TIMEOUT; fi
     if [ $(pgrep -c apt-get) -gt 0 ]; then killprocess apt-get $AFTER_TIMEOUT; fi
     if [ $(pgrep -c dpkg) -gt 0 ]; then killprocess dpkg $AFTER_TIMEOUT; fi
  fi

  if [ -s /tmp/apterrors ]; then
     grep "Unmet dependencies." /tmp/apterrors 2>/dev/null && timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; aptitude -yf install && timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; dpkg --configure -a && timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; apt-get -y autoremove
     grep "dpkg was interrupted, you must manually run 'dpkg --configure -a' to correct the problem." /tmp/apterrors 2>/dev/null && timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; dpkg --configure -a && timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; aptitude -yf install && timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; apt-get -y autoremove
     grep -E 'Encountered a section with no Package: header|Problem with MergeList ' /tmp/apterrors 2>/dev/null && rm -r /var/lib/apt/lists/*; timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; apt update -y; timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; dpkg --configure -a; timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; aptitude -yf install
  fi

  # Instalamos paquetes a medio instalar
  bad_packages=$(dpkg -l | grep -e ^iF -e ^ri | awk '{print $2}')
  if [ "$bad_packages" ]; then timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; aptitude -y install $bad_packages; fi

  # Aseguramos la actualización de pkgsync
  timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; aptitude search '~U' | grep -oE pkgsync >/dev/null 2>&1 && aptitude -yf install pkgsync

  export LC_ALL=$idioma
}

eliminar_kernels() {
  # Eliminar kernels antiguos siempre y cuando se haya elegido esta opción y se encuentre /usr/bin/purge-old-kernels
  if [ $PURGE_OLD_KERNELS = "yes" ] && [ -x /usr/local/sbin/purge-old-kernels ]; then timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; /usr/local/sbin/purge-old-kernels --keep $KEEP_LAST_KERNELS -qy; fi
}

launchpad_getkeys() {
  # Obtener claves de repositorios siempre y cuando se haya elegido esta opción y se encuentre /usr/bin/launchpad-getkeys
  options=""

  if [ $LAUNCHPAD_GETKEYS = "yes" ] && [ -x /usr/local/sbin/launchpad-getkeys ]; then
     [ -n "$LAUNCHPAD_GETKEYS_PROXY" ] && options+=" -p $LAUNCHPAD_GETKEYS_PROXY"
     [ $LAUNCHPAD_GETKEYS_REMOVE_EXPIRED_KEYS = "yes" ] && options+=" -r"

     launchpad-getkeys $options
  fi
}

eliminar_dependencias() {
  # Eliminar dependencias innecesarias de paquetes desinstalados, purgar paquetes desinstalados y limpiar la cache
  if [ $CLEAN = "yes" ]; then
     timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; apt-get -y autoremove
     timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; apt-get -y remove --purge $(dpkg -l| grep ^rc | awk '{print $2}')
     timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; apt-get -y clean
  fi
}

apagar_equipo() {
  # Apagar el equipo si el usuario pasó el parámetro -S
  if [ $SHUTDOWN = true ] || [ $AUTOSHUTDOWN = true ]; then timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg;/sbin/poweroff; fi
}

reiniciar_equipo() {
  # Reiniciar el equipo si el usuario pasó el parámetro -R
  if [ $REBOOT = true ] || [ $AUTOREBOOT = true ]; then timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg;/sbin/reboot; fi
}

check_auto_shutdown() {
  time=$(date +%H%M)

  if [ -n "$AUTOMATIC_SHUTDOWN_BETWEEN" ]; then
     (echo "$AUTOMATIC_SHUTDOWN_BETWEEN" | grep -Eq ^[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}$)
     horaini=$(expr match "$AUTOMATIC_SHUTDOWN_BETWEEN" '\(..:..\)' | tr -d ':')
     horafin=$(expr "$AUTOMATIC_SHUTDOWN_BETWEEN" : '.*\(..:..\)' | tr -d ':')

     if [ "$horaini" -lt "$horafin" ]; then
        [ "$time" -ge "$horaini" ] && [ "$time" -le "$horafin" ] && AUTOSHUTDOWN=true || AUTOSHUTDOWN=false
     else
        if [ "$horaini" -gt "$horafin" ]; then
           [ "$time" -le "$horaini" ] && [ "$time" -le "$horafin" ] && AUTOSHUTDOWN=true || AUTOSHUTDOWN=false
        fi
     fi
  fi
}

check_auto_reboot() {
  time=$(date +%H%M)

  if [ -n "$AUTOMATIC_REBOOT_BETWEEN" ]; then
     (echo "$AUTOMATIC_REBOOT_BETWEEN" | grep -Eq ^[0-9]{2}:[0-9]{2}-[0-9]{2}:[0-9]{2}$)
     horaini=$(expr match "$AUTOMATIC_REBOOT_BETWEEN" '\(..:..\)' | tr -d ':')
     horafin=$(expr "$AUTOMATIC_REBOOT_BETWEEN" : '.*\(..:..\)' | tr -d ':')

     if [ "$horaini" -lt "$horafin" ]; then
        [ "$time" -ge "$horaini" ] && [ "$time" -le "$horafin" ] && AUTOREBOOT=true || AUTOREBOOT=false
     else
        if [ "$horaini" -gt "$horafin" ]; then
           [ "$time" -le "$horaini" ] && [ "$time" -le "$horafin" ] && AUTOREBOOT=true || AUTOREBOOT=false
        fi
     fi
  fi

  if [ $REBOOT ] && [ "$AUTOMATIC_REBOOT_INTO_WINDOWS" = "yes" ] && [ -x /bin/efibootmgr ]; then
     # Obtenemos el orden de arranque actual
     bootorder=$(/bin/efibootmgr | sed -n 's|^BootOrder: \(.*\)|\1|p')

     for DISK in $(lsblk --nodeps |grep disk | awk '{print $1}'); do
        EFI_DISK="/dev/$DISK"
        EFIPART=$(gdisk -l $EFI_DISK | grep -w "EFI system partition" | awk '{print $1}')

        # Creamos una entrada específica para Windows 10, si no está creada
        if [ "$EFIPART" ]; then
           /bin/efibootmgr | grep "W10IES" 2>&1 > /dev/null || /bin/efibootmgr -c -d $EFI_DISK -p $EFIPART -L "W10IES" -l "\EFI\Microsoft\Boot\bootmgfw.efi"
        fi
     done

     # Restauramos el bootorder
     /bin/efibootmgr -o $bootorder

     # Establecemos un arranque temporal de Windows
     /bin/efibootmgr -n $(/bin/efibootmgr | grep "W10IES" | cut -f1 -d" " | sed -e "s/^Boot//" -e "s/*$//") 2>&1>/dev/null
  fi
}


# Matamos procesos detenidos
stopped_processes=$(ps auwx | awk 'NR>1 && $8 ~ "T" {print $2}')
if [ "$stopped_processes" ]; then kill -9 $stopped_processes; fi

# Establecemos valores por defecto
HELP=false
FORCE=false
SHUTDOWN=false # No apagar
REBOOT=false   # No reiniciar
AUTOSHUTDOWN=false # No apagar
AUTOREBOOT=false   # No reiniciar
PURGE_OLD_KERNELS=no
KEEP_LAST_KERNELS="2"
CLEAN=no
LAUNCH_SINC_PUPPET=yes
PUPPET_SERVER=puppetinstituto
AUTOMATIC_SHUTDOWN_BETWEEN=""
AUTOMATIC_REBOOT_BETWEEN=""
AUTOMATIC_REBOOT_INTO_WINDOWS=no
LAUNCHPAD_GETKEYS=yes
LAUNCHPAD_GETKEYS_PROXY=""
LAUNCHPAD_GETKEYS_REMOVE_EXPIRED_KEYS=no
TIMEOUT_FOR_DPKG_OR_APT="3m"
EFI_DISK=$(mount | grep '/boot/efi' | awk '{print $1}' | sed 's/[0-9]*//g') # Disco que contiene EFI
ABORT_ON_FAILED_REPOS="yes"
DISABLED_FAILED_REPOS=false

# Controlamos la ejecución manual o automática de pkgsync
ENABLE=yes
[ -r /etc/default/pkgsync ] && . /etc/default/pkgsync

parse_options "$@"

$FORCE && ENABLE=yes
if [ "$ENABLE" == "no" ] || [ ! "$ENABLE" ]; then
  echo " * [info]: La aplicación 'pkgsync' está desactivada en /etc/default/pkgsync."
  echo "           Para activarla poner el valor ENABLE=yes."
  exit 0
fi

# Definimos el fichero de lock
lockfile=/var/lock/$(basename $0)
lockfile-create $lockfile || exit 2
lockfile-touch $lockfile &
BADGER="$!"

trap "kill "${BADGER}" 2>/dev/null || true; lockfile-remove $lockfile; exit" QUIT INT TERM EXIT

if [ ! -r /etc/pkgsync/musthave ]; then
        IGNORE_MUSTHAVE="yes"
fi

# No ejecutar pkgsync cuando falta alguno de los ficheros musthave, mayhave o maynothave
if [ ! -r /etc/pkgsync/musthave -a ! "$IGNORE_MUSTHAVE" = "yes" -o \
     ! -r /etc/pkgsync/mayhave -o \
     ! -r /etc/pkgsync/maynothave ]; then
	echo "Error: Missing files in /etc/pkgsync. Aborting."
	echo
	echo "Please see /usr/share/doc/pkgsync/README.Debian for information on"
	echo "configuring pkgsync."

	exit 1
fi

# Check if we've got debtags installed
[ -x /usr/bin/debtags ] && USE_DEBTAGS=yes

# Determinar si se debe apagar el equipo al terminar
check_auto_shutdown

# Determinar si se debe reiniciar el equipo al terminar
check_auto_reboot

# Descargar claves de repositorios
launchpad_getkeys

# Aseguramos el estado de los paquetes y eliminamos kernels antiguos
solveapterrors;eliminar_kernels

runned_sinc_puppet=false
# Si está corriendo sinc_puppet, esperamos hasta que termine
if [[ $(pgrep sinc_puppet) ]]; then
   echo "Esperando a que termine sinc_puppet..."
   runned_sinc_puppet=true
fi

while [[ $(pgrep sinc_puppet) ]]; do
   sleep 1
done

# Si el servidor puppet responde, se encuentra el ejecutable de sinc_puppet, y no ha sido iniciado previamente, lo iniciamos
[ -n "$PUPPET_SERVER" ] && ping -c1 $PUPPET_SERVER > /dev/null 2>&1

if [ $? -eq 0 ]; then
   if [ $runned_sinc_puppet = false ]; then
      installed_version=$(dpkg -s linex-ubuntu-puppet 2>/dev/null | grep 'Version:' | cut -f2 -d" ")
      if version_ge $installed_version "2.7"; then
         if [ $LAUNCH_SINC_PUPPET = "yes" ] && [ -x /usr/sbin/sinc_puppet ]; then /usr/sbin/sinc_puppet -f now; fi
      else
         if [ $LAUNCH_SINC_PUPPET = "yes" ] && [ -x /usr/sbin/sinc_puppet ]; then /usr/sbin/sinc_puppet -f; fi
      fi
   fi
fi

# Update the package lists
timeout $TIMEOUT_FOR_DPKG_OR_APT wait_for_apt_or_dpkg; LC_ALL=C apt-get update 2>&1 | grep '^Err:' | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%-]*" > /tmp/failedrepositories

if [ $ABORT_ON_FAILED_REPOS = "yes" ]; then
   # Abortamos pkgsync si algún repositorio no se encuentra accesible
   if [ -s /tmp/failedrepositories ]; then
      echo -e "\n[ERR] aptitude update error" | tee -a /var/log/pkgsync.log
      echo "The following repositories fail:" | tee -a /var/log/pkgsync.log
      cat /tmp/failedrepositories | tee -a /var/log/pkgsync.log
      echo "      Aborting" | tee -a /var/log/pkgsync.log
      exit 1
   fi
elif [ $ABORT_ON_FAILED_REPOS = "no" ]; then
   disable_failed_repositories
   DISABLED_FAILED_REPOS=true
fi

run_debtags update

# Create ies files if don't exists
test -f /etc/pkgsync/musthave.ies || touch /etc/pkgsync/musthave.ies
test -f /etc/pkgsync/maynothave.ies || touch /etc/pkgsync/maynothave.ies
test -f /etc/pkgsync/mayhave.ies || touch /etc/pkgsync/mayhave.ies
test -f /etc/pkgsync/musthave.orphan || touch /etc/pkgsync/musthave.orphan

if [ "$IGNORE_MUSTHAVE" = "yes" ]; then
   MUSTHAVE=""
else
   MUSTHAVE="/etc/pkgsync/musthave"
fi

if [ "$IGNORE_MAYNOTHAVE" = "yes" ]; then
   MAYNOTHAVE=""
else
   MAYNOTHAVE="/etc/pkgsync/maynothave"
fi

if [ "$IGNORE_MAYHAVE" = "yes" ]; then
   MAYHAVE=""
else
   MAYHAVE="/etc/pkgsync/mayhave"
fi

# Merge files
merge_files

# Find out what parameters to give to aptitude.
installed=$( dpkg -l | grep '^ii' | cut -c5- | cut '-d ' -f1 )
musthave_install=$( getpkgs /etc/pkgsync/musthave.all | sort -u | sed "s/$/+/" )
maynothave_remove=$( getpkgs /etc/pkgsync/maynothave.all | sort -u | sed "s/$/-/" )
mayhave_marknonauto=$( getpkgs /etc/pkgsync/mayhave.all | sort -u | sed "s/$/\&m/" )
mustormayhave=$( ( getpkgs /etc/pkgsync/musthave.all ; getpkgs /etc/pkgsync/mayhave.all ) | sort -u )
if [ "$IGNORE_MUSTHAVE" = "no" ]; then
 rest_markauto=$( filter $installed $installed $mustormayhave | sed "s/$/\&M/" )
fi

run_aptitude full-upgrade '?upgradable' $musthave_install $maynothave_remove $mayhave_marknonauto $rest_markauto

if [ $? -ne 0 ]; then
   test_files; remove_packages_from_lists; merge_files

   # Find out what parameters to give to aptitude.
   installed=$( dpkg -l | grep '^ii' | cut -c5- | cut '-d ' -f1 )
   musthave_install=$( getpkgs /etc/pkgsync/musthave.all | sort -u | sed "s/$/+/" )
   maynothave_remove=$( getpkgs /etc/pkgsync/maynothave.all | sort -u | sed "s/$/-/" )
   mayhave_marknonauto=$( getpkgs /etc/pkgsync/mayhave.all | sort -u | sed "s/$/\&m/" )
   mustormayhave=$( ( getpkgs /etc/pkgsync/musthave.all ; getpkgs /etc/pkgsync/mayhave.all ) | sort -u )
   if [ "$IGNORE_MUSTHAVE" = "no" ]; then
    rest_markauto=$( filter $installed $installed $mustormayhave | sed "s/$/\&M/" )
   fi

   run_aptitude full-upgrade '?upgradable' $musthave_install $maynothave_remove $mayhave_marknonauto $rest_markauto
fi

run_aptitude autoclean

eliminar_kernels;eliminar_dependencias

if [ $ABORT_ON_FAILED_REPOS = "no" ] && [ $DISABLED_FAILED_REPOS = true ]; then enable_repositories; fi

apagar_equipo;reiniciar_equipo
